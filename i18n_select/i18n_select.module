<?php
// $Id: i18n_select.module,v 1.1.2.1 2010/11/09 10:31:32 brucepearson Exp $

/**
 * Implementation of hook_menu().
 */
function i18n_select_menu() {
  $items['admin/config/regional/i18n/select'] = array(
    'title' => 'Selection',
    'description' => 'Configure extended options for multilingual content and translations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18n_select_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'i18n_select.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implementation of hook_query_node_access_alter().
 *
 * Rewrite node queries so language selection options are enforced.
 */
function i18n_select_query_node_access_alter(QueryAlterableInterface $query) {
  if (variable_get('i18n_select_nodes', TRUE) && ($table_alias = i18n_select_check_table($query, 'node'))) {
    // if the language field is present we don't want to do any filtering.
    $fields = $query->getFields();
    dpm($fields);
    dpm($query->conditions());
    if (isset($fields['language'])) {
      return;
    }

    $language = i18n_select_language();
    $default_lang = language_default('language');

    if (variable_get('i18n_select_missing_translation', FALSE) && $language != $default_lang) {
          
      // we want to include nodes from the default language that haven't been
      // translated to the current language
  
      // SELECT * FROM node n
      //   LEFT JOIN node i18n ON n.tnid > 0 AND n.tnid = i18n.tnid AND i18n.language = 'es'
      //   WHERE n.language='es' OR (n.language='en' AND i18n.nid IS NULL)
      
      // Make sure the conditions refer to the node table. eg using 'n.promote' instead of 'promote'
      i18n_select_check_conditions($query, $table_alias);

      $query->leftjoin('node', 'i18n', 'n.tnid > 0 AND n.tnid = i18n.tnid AND i18n.language = :lang', array(':lang' => $language));
      $query->where($table_alias . '.language=:lang OR (' . $table_alias . '.language=:default_lang AND i18n.nid IS NULL)', array(':lang' => $language, ':default_lang' => $default_lang));

    } else {
      $query->where($table_alias . '.language=:lang', array(':lang' => $language));
    }
  }
}

/**
 * Implementation of hook_query_term_access_alter().
 * 
 * Rewrite taxonomy term queries so language selection options are enforced.
 */
function i18n_select_query_term_access_alter(QueryAlterableInterface $query) {
  if (variable_get('i18n_select_taxonomy', TRUE) && ($table_alias = i18n_select_check_table($query, 'taxonomy_term_data'))) {
    $query->condition($table_alias . '.language', i18n_select_language()); 
  }
}

/**
 * Check table exists in query and get alias for it
 */
function i18n_select_check_table($query, $table_name) {
  foreach ($query->getTables() as $table) {
    if ($table['table'] == $table_name) {
      return !empty($table['alias']) ? $table['alias'] : $table_name;
    }
  }
}

/**
 * Check all query conditions have a table alias
 */
function i18n_select_check_conditions($query, $table_alias) {
  $conditions =& $query->conditions();
  foreach ($conditions as $index => $condition) {
    if (is_array($condition) && isset($condition['field'])) {
      if (strpos($condition['field'], '.') === FALSE) {
        $conditions[$index]['field'] = $table_alias . '.' . $condition['field'];
      }
    }
  }
}

/**
 * Get language code for content selection
 */
function i18n_select_language() {
  return $GLOBALS['language_content']->language;
}